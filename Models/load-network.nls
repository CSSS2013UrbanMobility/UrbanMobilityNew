to load-networks
  clear-canvas white
  load-public-transport-network
  load-road-network
  if ( add-additional-transit-service? = "Yes, a tram line, please!" ) [ if debug? [ show "adding tram line" ] add-tram-line ]
  if ( add-additional-transit-service? = "Yes, a bus line, please!" ) [ if debug? [ show "adding bus line" ] add-bus-line ]
  setup-owned
end

to add-bus-line
  set additional-bus-line load-from-shapefile "../Data/simple_network/ptA1.shp"
  create-edges-and-vertices additional-bus-line blue 0.4 blue 0.4 "circle" true
  if debug? [ show "busses loaded" ]
end

to add-tram-line
  set additional-tram-line load-from-shapefile "../Data/simple_network/ptA2.shp"
  ;zoom-to-dataset additional-tram-line
  create-edges-and-vertices additional-tram-line blue 0.4 blue 0.4 "circle" true
  if debug? [ show "trams loaded" ]
end

to setup-owned
   set scale-factor 200
    ask roads [
       ;set capacity scale-factor * link-length * (1 + random 2) / 5
       set capacity capacity * (1 + random 2) / 5
       set people-in-edge []
    ]
    ask transits [
      set people-in-edge []
      
      ;;transits have infinite capacity, let put 10* number of agents
      set capacity 10000;; * count individuals TURTLES ARE NOT SET YET!
    ]
end

to load-public-transport-network
  set pt-network load-from-shapefile "../Data/simple_network/pt.shp"
  zoom-to-dataset pt-network
  create-edges-and-vertices pt-network blue 0.3 blue 0.3 "circle" true
end

to load-road-network
  set road-network load-from-shapefile "../Data/simple_network/rd.shp"
  ;zoom-to-dataset road-network
  create-edges-and-vertices road-network red 0.2 red 0.2 "circle" false
end

to-report load-from-shapefile [filename]
  report gis:load-dataset filename
end

to zoom-to-dataset [vectordataset]
  let margin 0.01   ;; in degrees
  let envelope gis:envelope-of vectordataset
  if debug? [show envelope]
  set envelope (list (item 0 envelope - margin)  (item 1 envelope + margin) (item 2 envelope - margin) (item 3 envelope + margin))
  if debug? [show envelope]
  gis:set-world-envelope-ds envelope ;gis:envelope-of vectordataset
end


to-report create-vertex-at [coords v_color v_size v_shape is-public-transport?]
  if empty? coords [
    report nobody
  ]

  let x first coords
  let y last coords
  
  if not any? vertices-on patch x y [
    create-vertices 1 [ 
      set xcor x
      set ycor y
      set shape v_shape
      set size v_size
      set color v_color
      set is-station? is-public-transport?
    ]
  ]
  report one-of vertices-on patch x y
end
    
to create-edges-and-vertices [vectordataset l_color l_width v_color v_size v_shape is-public-transport?]  
  foreach gis:feature-list-of vectordataset [
    let feature ?
    foreach gis:vertex-lists-of feature [
      let firstpoint create-vertex-at gis:location-of first ? v_color v_size v_shape is-public-transport?
      let lastpoint create-vertex-at gis:location-of last ? v_color v_size v_shape is-public-transport?
      if not ((firstpoint = lastpoint) or (firstpoint = nobody) or (lastpoint = nobody)) [
        ask firstpoint [
          if-else is-public-transport? [
             create-transit-with lastpoint [
               set color gis:property-value feature "color_num"
               set length-of-edge gis:property-value feature "length"
               set ligne gis:property-value feature "line"
               set thickness l_width
               set avg-speed 30 + (random 2 * 20 ) * 1000 ;; sorry, my fault
              
             ]
          ] [
             create-road-with lastpoint [
               set color l_color
               set thickness l_width 
               set capacity gis:property-value feature "capacity"
               set avg-speed gis:property-value feature "avgspeed"
               set length-of-edge gis:property-value feature "length"
              ;; set avg-speed 30 + (random 2 * 20 ) * 1000         
             ]
          ]
;          create-link-with lastpoint [
;            set color l_color
;            set thickness l_width
;            if-else is-public-transport? [ set breed transits ] [ set breed roads ]            
;          ]
        ]
      ]  
    ]
  ]
end

  
to clear-canvas [colour]
  ask patches [ 
    set pcolor colour
  ]
end