;;;;;;;
;;;setup functions for routines procedures
;;;;;;



to setup-routing
  
  
  ;;here set specific variables, prefered paths etc
  set begin-congestion-treshold 0.7
  set max-congestion-treshold 1
  set min-congestion-speed 5
  
  
  
  ;;ask individuals here to set their own routing variables, better for code separation
  set paths-setup count individuals
  output-print "Caching all shortest and prefered routes..."
  let t timer
  
  ask individuals [
    setup-prefered-paths
    
    set times-rerouted 0
    set individual-tolerance-for-congestion 1
    set is-travelling? false
    set paths-setup paths-setup - 1
    
    ;;next travel time
    set next-travel-start first time-schedule
    set time-schedule lput first time-schedule but-first time-schedule
    
    ;;total travel times
    set travel-time 0 set mean-travel-time 0
    
  ]
  
  ask roads [
    set people-in-edge []
  ]
  
  
  
  
  ;;"bug" correcting
  ask individuals [
    let die? false
    foreach prefered-paths [foreach ? [if length ? < 2[set die? true]]];det sie?
    foreach paths-transportation [
      if member? [] ? [set die? true] 
    ]
    if die? [die]
  ]
  
  
  
  output-print word word "Done in " ((timer - t) / 1000) "ms"
  

end


to setup-prefered-paths
  ;;each agent has like for example three prefered paths from housing to work, work to leisure, leisure to work
  ;;paths are calculated at setup by particular heuristic, by small perturbation of the length of the shortest path and new shortest path calculation
  
  ;;calculation of shortest paths in public transportation are also done here for a huge gain in time
  
  set prefered-paths []
  set paths-transportation []
  
  let origin one-of vertices with-min [distance myself] let destination nobody
  foreach space-schedule [
    set destination one-of vertices with-min [distance patch first ? first but-first ?]
    set prefered-paths lput three-best-paths origin destination prefered-paths
    set origin destination
  ]
  
  set origin one-of vertices with [is-station?] with-min [distance myself] set destination nobody
  nw:set-snapshot vertices transits
  ask transits [set weight link-length / avg-speed]
  foreach space-schedule [
    let shortest []
    set destination one-of vertices with [is-station?] with-min [distance patch first ? first but-first ?]
    ask origin [set shortest nw:weighted-path-to destination "weight"]
    set paths-transportation lput shortest paths-transportation
    set origin destination
  ]
  
end


to-report three-best-paths [origin destination]
  ;;get shortest path
  let first-path [] let second-path [] let third-path []
  nw:set-snapshot vertices roads
  ask roads [set weight link-length / avg-speed]
  ask origin [set first-path nw:weighted-path-to destination "weight"]
  
  nw:set-snapshot vertices roads
  ;;perturbate the path length (increasing weight variable)
  set epsilon-prefered-paths 10 * mean [link-length] of links ;;put it as a global param? -> make test on the euclidian "continuity"
  foreach first-path [ask ? [set weight weight + epsilon-prefered-paths]]
  ask origin [set second-path nw:weighted-path-to destination "weight"]
  
   nw:set-snapshot vertices roads
  ;;finish by the third
  foreach second-path [ask ? [set weight weight + epsilon-prefered-paths]]
  ask origin [set third-path nw:weighted-path-to destination "weight"]
  
  report (list first-path second-path third-path)
  
end
